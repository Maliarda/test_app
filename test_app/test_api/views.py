from django.shortcuts import get_object_or_404
from rest_framework import generics
from rest_framework.response import Response
from test_api.models import Participant, IQTestResult, EQTestResult
from test_api.serializers import ParticipantSerializer, IQTestResultSerializer, EQTestResultSerializer
from test_api.utils import generate_login

from drf_yasg.utils import swagger_auto_schema


class ParticipantCreateView(generics.CreateAPIView):
    serializer_class = ParticipantSerializer

    @swagger_auto_schema(
        request_body=ParticipantSerializer,
        responses={
            201: ParticipantSerializer(),
            400: "Bad Request",
        },
        operation_description="Create a new participant with autogenerated login",
    )
    def create(self, request, *args, **kwargs):
        """
        Create a new participant with autogenerated login.
        """
        response = super().create(request, *args, **kwargs)
        data = {'login': response.data.get('login')}
        return Response(data, status=response.status_code)

    def perform_create(self, serializer):
        login = generate_login()
        serializer.save(login=login)


class IQTestResultCreateView(generics.CreateAPIView):
    queryset = IQTestResult.objects.all()
    serializer_class = IQTestResultSerializer

    def perform_create(self, serializer):
        login = self.request.data.get('login')
        participant = get_object_or_404(Participant, login=login)
        serializer.save(participant=participant)


class EQTestResultCreateView(generics.CreateAPIView):
    queryset = EQTestResult.objects.all()
    serializer_class = EQTestResultSerializer

    def perform_create(self, serializer):
        login = self.request.data.get('login')
        participant = get_object_or_404(Participant, login=login)
        letters = self.request.data.get('letters')
        serializer.save(participant=participant, letters=letters)


class TestResultsView(generics.RetrieveAPIView):
    queryset = Participant.objects.all()
    serializer_class = ParticipantSerializer
    lookup_field = 'login'  # Указываем поле для поиска в URL

    def get(self, request, *args, **kwargs):
        login = self.kwargs.get('login')  # Получаем логин из URL

        instance = get_object_or_404(self.get_queryset(), login=login)  # Ищем участника по логину

        iq_results = IQTestResult.objects.filter(participant=instance)
        eq_results = EQTestResult.objects.filter(participant=instance)
        iq_serializer = IQTestResultSerializer(iq_results, many=True)
        eq_serializer = EQTestResultSerializer(eq_results, many=True)
        data = {
            'login': instance.login,
            'iq_results': iq_serializer.data,
            'eq_results': eq_serializer.data,
        }
        return Response(data)
